{"ast":null,"code":"var _jsxFileName = \"/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\nimport axios from \"axios\";\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst monday = mondaySdk();\nconst storageInstance = monday.storage.instance;\nconst App = () => {\n  _s();\n  const [context, setContext] = useState();\n  const [vinyls, setVinyls] = useState([]);\n  const [jobCost, setJobCost] = useState(null);\n  const [colOptions, setColOptions] = useState([]);\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n\n  // Getting error 500 from the API, so I'm using a local JSON file for now\n  // useEffect(() => {\n  //     const fetchData = async () => {\n  //         try {\n  //             // First API call to list vinyls\n  //             const vinylUrl = `${corsProxy}https://api.stickermania818.com/listvinyls`;\n  //             const vinylResponse = await fetch(vinylUrl);\n  //             if (!vinylResponse.ok) {\n  //                 throw new Error(`Error: ${vinylResponse.statusText}`);\n  //             }\n  //             const vinylsData = await vinylResponse.json();\n  //             setVinyls(vinylsData);\n\n  //             // Second API call to get job cost\n  //             const jobCostUrl = `${corsProxy}https://api.stickermania818.com/jobcost?vinylType=MATTE6MIL&width=4&height=5&count=100&includeColor=true&colorPercent=100&colorPasses=1&includeWhite=true&whitePercent=100&whitePasses=1&includeGloss=true&glossPercent=100&glossPasses=1&targetCostPerPrint=1.50&bSalesTax=true&bSalesCommission=true`;\n  //             const jobCostResponse = await fetch(jobCostUrl);\n  //             if (!jobCostResponse.ok) {\n  //                 throw new Error(`Error: ${jobCostResponse.statusText}`);\n  //             }\n  //             const jobCostData = await jobCostResponse.json();\n  //             setJobCost(jobCostData);\n  //         } catch (error) {\n  //             console.error('Error fetching data:', error);\n  //         }\n  //     };\n\n  //     fetchData();\n  // }, []);\n\n  useEffect(() => {\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    monday.listen(\"context\", res => {\n      setContext(res.data);\n    });\n  }, []);\n  useEffect(() => {\n    // if (context) {\n    console.log(\"Parent Context 2\", context);\n    console.log(\"Context: \", context);\n    const boardId = context.boardId;\n    console.log(\"using boardID: \", context.boardId);\n    const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                }\n            }\n            }`;\n    monday.api(query).then(res => {\n      console.log(\"ListInput res: \", res);\n      const columns = res.data.boards[0].columns;\n      console.log(\"Columns: \", columns);\n      const filter = 'numbers';\n      const cols = columns.map(column => {\n        return {\n          label: column.title,\n          value: column.id\n        };\n      });\n      console.log(\"cols: \", cols);\n      const filteredCols = cols.filter(col => col.value.includes(filter)).map(col => {\n        return {\n          label: col.label,\n          value: col.value\n        };\n      });\n      setColOptions(filteredCols);\n      storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then(res => {\n        console.log(\"colOptions stored in board storage: \", res);\n      });\n    }).catch(err => {\n      console.log(\"Error fetching columns: \", err);\n    }).finally(() => {\n      // setShouldLoad(false)\n    });\n    // }\n  }, []);\n\n  //Some example what you can do with context, read more here: https://developer.monday.com/apps/docs/mondayget#requesting-context-and-settings-data\n  const attentionBoxText = `Hello, your user_id is: ${context ? context.user.id : \"still loading\"}.\n  Let's start building your amazing app, which will change the world!`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(AttentionBox, {\n      title: \"Hello Monday Apps!\",\n      text: 'Vinyl: ' + vinyls + ' Job Cost: ' + jobCost,\n      type: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"hJLR8dl0u79V8YoLWqZ1KYC/azs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","mondaySdk","AttentionBox","axios","jsxDEV","_jsxDEV","monday","storageInstance","storage","instance","App","_s","context","setContext","vinyls","setVinyls","jobCost","setJobCost","colOptions","setColOptions","corsProxy","execute","listen","res","data","console","log","boardId","query","api","then","columns","boards","filter","cols","map","column","label","title","value","id","filteredCols","col","includes","setItem","JSON","stringify","catch","err","finally","attentionBoxText","user","className","children","text","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\nimport axios from \"axios\";\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nconst monday = mondaySdk();\nconst storageInstance = monday.storage.instance;\n\nconst App = () => {\n  const [context, setContext] = useState();\n  const [vinyls, setVinyls] = useState([]);\n  const [jobCost, setJobCost] = useState(null);\n  const [colOptions, setColOptions] = useState([]);\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n\n  // Getting error 500 from the API, so I'm using a local JSON file for now\n  // useEffect(() => {\n  //     const fetchData = async () => {\n  //         try {\n  //             // First API call to list vinyls\n  //             const vinylUrl = `${corsProxy}https://api.stickermania818.com/listvinyls`;\n  //             const vinylResponse = await fetch(vinylUrl);\n  //             if (!vinylResponse.ok) {\n  //                 throw new Error(`Error: ${vinylResponse.statusText}`);\n  //             }\n  //             const vinylsData = await vinylResponse.json();\n  //             setVinyls(vinylsData);\n\n  //             // Second API call to get job cost\n  //             const jobCostUrl = `${corsProxy}https://api.stickermania818.com/jobcost?vinylType=MATTE6MIL&width=4&height=5&count=100&includeColor=true&colorPercent=100&colorPasses=1&includeWhite=true&whitePercent=100&whitePasses=1&includeGloss=true&glossPercent=100&glossPasses=1&targetCostPerPrint=1.50&bSalesTax=true&bSalesCommission=true`;\n  //             const jobCostResponse = await fetch(jobCostUrl);\n  //             if (!jobCostResponse.ok) {\n  //                 throw new Error(`Error: ${jobCostResponse.statusText}`);\n  //             }\n  //             const jobCostData = await jobCostResponse.json();\n  //             setJobCost(jobCostData);\n  //         } catch (error) {\n  //             console.error('Error fetching data:', error);\n  //         }\n  //     };\n\n  //     fetchData();\n  // }, []);\n\n\n  \n\n\n  useEffect(() => {\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    monday.listen(\"context\", (res) => {\n      setContext(res.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    // if (context) {\n      console.log(\"Parent Context 2\", context)\n\n            console.log(\"Context: \", context)\n            const boardId = context.boardId;\n            console.log(\"using boardID: \", context.boardId)\n            \n            const query = `query {\n            boards(ids: ${boardId}) {\n                columns {\n                    id\n                    title\n                }\n            }\n            }`;\n            monday.api(query).then((res) => {\n                console.log(\"ListInput res: \", res);\n                const columns = res.data.boards[0].columns;\n                console.log(\"Columns: \", columns);\n                const filter = 'numbers'\n                const cols = columns.map(column => {                      \n                    return {label: column.title, value: column.id}\n                })\n                console.log(\"cols: \", cols)\n                const filteredCols = cols\n                .filter(col => col.value.includes(filter))\n                .map(col => {\n                    return {label: col.label, value: col.value}\n                })\n                setColOptions(filteredCols)\n                storageInstance.setItem(`colOptions`, JSON.stringify(cols)).then((res) => {\n                    console.log(\"colOptions stored in board storage: \", res);\n                })\n            }).catch((err) => {\n                console.log(\"Error fetching columns: \", err);\n            }).finally(() => {\n                // setShouldLoad(false)\n            });\n    // }\n  }, [])\n\n  //Some example what you can do with context, read more here: https://developer.monday.com/apps/docs/mondayget#requesting-context-and-settings-data\n  const attentionBoxText = `Hello, your user_id is: ${\n    context ? context.user.id : \"still loading\"\n  }.\n  Let's start building your amazing app, which will change the world!`;\n\n  return (\n    <div className=\"App\">\n      <AttentionBox\n        title=\"Hello Monday Apps!\"\n        text={'Vinyl: ' + vinyls + ' Job Cost: ' + jobCost}\n        type=\"success\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}