[{"/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/index.js":"1","/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/App.js":"2","/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/serviceWorker.js":"3"},{"size":527,"mtime":1711248151710,"results":"4","hashOfConfig":"5"},{"size":12998,"mtime":1711312751199,"results":"6","hashOfConfig":"5"},{"size":5085,"mtime":1711136397630,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"ogofoe",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/index.js",[],[],[],"/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/App.js",["19","20","21","22","23","24","25","26","27","28","29","30","31","32"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport \"monday-ui-react-core/dist/main.css\";\n//Explore more Monday React Components here: https://style.monday.com/\nimport AttentionBox from \"monday-ui-react-core/dist/AttentionBox.js\";\nimport { TextField, Button, Label, Dropdown, Loader, Divider, ExpandCollapse } from \"monday-ui-react-core\"\nimport axios from \"axios\";\n\n// Usage of mondaySDK example, for more information visit here: https://developer.monday.com/apps/docs/introduction-to-the-sdk/\nconst monday = mondaySdk();\nconst storageInstance = monday.storage.instance;\n\nconst App = () => {\n  const [context, setContext] = useState();\n  const [vinyls, setVinyls] = useState([]);\n  const [jobCost, setJobCost] = useState(null);\n  const [colOptions, setColOptions] = useState([]);\n  const [apiParams, setApiParams] = useState({vinylType: '', width: 0.0, height: 0.0, count: 0, includeColor: false, colorPercent: 0.0, \n                                            colorPasses: 0, includeWhite: false, whitePercent: 0.0, whitePasses: 0, includeGloss: false, \n                                            glossPercent: 0.0, glossPasses: 0, targetCostPerPrint: 0.0, bSalesTax: false, bSalesCommission: false})\n  const [selectedVinyl, setSelectedVinyl] = useState('')\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n\n  // Conversions\n  /*\n    Input:\n    vinylType: CUSTOM\n    width: Dimensions\n    height: Dimensions\n    count: Count\n    includeColor: Print Settings\n    colorPercent: Color Percent (NEW)\n    colorPasses: Color Passes (NEW)\n    includeWhite: Print Settings\n    whitePercent: White Percent (NEW)\n    whitePasses: White Passes (NEW)\n    includeGloss: Print Settings\n    glossPercent: Gloss Percent (NEW)\n    glossPasses: Gloss Passes (NEW)\n    targetCostPerPrint: Target Cost (NEW) \n    bSalesTax: Sales Tax\n    bSalesCommission: Sales Commission (NEW)\n\n    Output:\n    COGS: costOfGoodsPerPrintJob\n    Per Item Sale: perPrintTotal\n    Total Sale: jobTotal\n  */\n\n  useEffect(() => {\n      const fetchData = async () => {\n          try {\n\n            const headers = {\n              // Uncomment or edit according to the header you need to set\n              // 'Origin': 'http://your-origin.com',\n              'X-Requested-With': 'XMLHttpRequest',\n              'Content-Type': 'application/json'\n              // Add other headers as needed\n            };\n\n              // First API call to list vinyls\n              const vinylUrl = `${corsProxy}https://api.stickermania818.com/listvinyls`;\n              const vinylResponse = await fetch(vinylUrl, {headers});\n              if (!vinylResponse.ok) {\n                  throw new Error(`Error: ${vinylResponse.statusText}`);\n              }\n              const vinylsData = await vinylResponse.json();\n              const filteredVinylData = vinylsData\n                .map(item => {\n                    return {label: item, value: item}\n                })\n              console.log(\"Vinyls Data: \", filteredVinylData)\n              setVinyls(filteredVinylData);\n\n              // Second API call to get job cost\n              // const jobCostUrl = `${corsProxy}https://api.stickermania818.com/jobcost?vinylType=MATTE-6MIL&width=4&height=5&count=100&includeColor=true&colorPercent=100&colorPasses=1&includeWhite=true&whitePercent=100&whitePasses=1&includeGloss=true&glossPercent=100&glossPasses=1&targetCostPerPrint=1.50&bSalesTax=true&bSalesCommission=true`;\n              // const jobCostResponse = await fetch(jobCostUrl, {headers});\n              // if (!jobCostResponse.ok) {\n              //     throw new Error(`Error: ${jobCostResponse.statusText}`);\n              // }\n              // const jobCostData = await jobCostResponse.json();\n              // console.log(\"Job Cost Data: \", jobCostData)\n              // setJobCost(jobCostData);\n          } catch (error) {\n              console.error('Error fetching data:', error);\n          }\n      };\n\n      fetchData();\n  }, []);\n\n\n  \n\n\n  useEffect(() => {\n    // Notice this method notifies the monday platform that user gains a first value in an app.\n    // Read more about it here: https://developer.monday.com/apps/docs/mondayexecute#value-created-for-user/\n    monday.execute(\"valueCreatedForUser\");\n\n    // TODO: set up event listeners, Here`s an example, read more here: https://developer.monday.com/apps/docs/mondaylisten/\n    monday.listen(\"context\", (res) => {\n      setContext(res.data);\n\n      storageInstance.getItem('selectedVinyl_' + res.data.itemId).then(result1 => {\n        setSelectedVinyl(JSON.parse(result1.data.value) || []);  \n      }).catch(error => {\n        console.log(\"Error fetching database: \", error)\n      })\n    });\n\n    \n  }, []);\n\n  const obtainInputParams = (extractedParams) => {\n    const dimensions = extractedParams.filter(param => param.label === 'text')[0].value\n    const regex = /\\d+/g;\n    const dimAsNums = dimensions.match(regex).map(Number);\n\n    const width = dimAsNums[0]\n    const height = dimAsNums[1]\n    const count = parseInt(extractedParams.filter(param => param.label === 'numbers')[0].value, 10)\n\n    const printSettings = (extractedParams.filter(param => param.label === 'dropdown0')[0].value).split('-')\n    const includesWhite = printSettings.includes('WHITE') ? true : false\n    const includesGloss = printSettings.includes('GLOSS') ? true : false\n    const includesColor = printSettings.includes('CMYK') ? true : false\n\n    const colorPercent = parseFloat(extractedParams.filter(param => param.label === 'numbers7')[0].value)\n    const colorPasses = parseInt(extractedParams.filter(param => param.label === 'numbers5')[0].value)\n    const whitePercent = parseFloat(extractedParams.filter(param => param.label === 'numbers1')[0].value)\n    const whitePasses = parseInt(extractedParams.filter(param => param.label === 'numbers14')[0].value)\n    const glossPercent = parseFloat(extractedParams.filter(param => param.label === 'numbers4')[0].value)\n    const glossPasses = parseInt(extractedParams.filter(param => param.label === 'numbers72')[0].value)\n\n    const targetCost = parseFloat(extractedParams.filter(param => param.label === 'numbers2')[0].value)\n    const tax = extractedParams.filter(param => param.label === 'status_11')[0].value === 'Yes' ? true : false\n    const commission = extractedParams.filter(param => param.label === 'status_1')[0].value === 'Yes' ? true : false\n\n    console.log(\"Print Settings: \", printSettings)\n    // const includeColor = extractedParams.filter(param => param.label === 'dropdown0')[0].value\n\n    \n\n    const params = {\n      vinylType: selectedVinyl.value,\n      width: width,\n      height: height,\n      count: count,\n      includeColor: includesColor,\n      colorPercent: colorPercent,\n      colorPasses: colorPasses,\n      includeWhite: includesWhite,\n      whitePercent: whitePercent,\n      whitePasses: whitePasses,\n      includeGloss: includesGloss,\n      glossPercent: glossPercent,\n      glossPasses: glossPasses,\n      targetCostPerPrint: targetCost,\n      bSalesTax: tax,\n      bSalesCommission: commission\n    }\n    \n    return params\n  }\n\n  const getJobCost = async (params) => {\n    const jobCostData = null\n    try {\n\n      const headers = {\n        // Uncomment or edit according to the header you need to set\n        // 'Origin': 'http://your-origin.com',\n        'X-Requested-With': 'XMLHttpRequest',\n        // Add other headers as needed\n      };\n\n        // Second API call to get job cost\n        const jobCostUrl = `${corsProxy}https://api.stickermania818.com/jobcost?vinylType=${params.vinylType}&width=${params.width}&height=${params.height}&count=${params.count}&includeColor=${params.includeColor}&colorPercent=${params.colorPercent}&colorPasses=${params.colorPasses}&includeWhite=${params.includeWhite}&whitePercent=${params.whitePercent}&whitePasses=${params.whitePasses}&includeGloss=${params.includeGloss}&glossPercent=${params.glossPercent}&glossPasses=${params.glossPasses}&targetCostPerPrint=${params.targetCostPerPrint}&bSalesTax=${params.bSalesTax}&bSalesCommission=${params.bSalesCommission}`;\n        const jobCostResponse = await fetch(jobCostUrl, {headers});\n        if (!jobCostResponse.ok) {\n            throw new Error(`Error: ${jobCostResponse.statusText}`);\n        }\n        const jobCostData = await jobCostResponse.json();\n        console.log(\"Job Cost Data: \", jobCostData)\n        setJobCost(jobCostData);\n    } catch (error) {\n        console.error('Error fetching data:', error);\n    }\n\n    return jobCostData\n  }\n\n  // Sales commission is double\n  // \n\n  const calculate = () => {\n    if (context) {\n      console.log(\"Parent Context 2\", context)\n\n      console.log(\"Context: \", context)\n      const boardId = context.boardId;\n      const itemId = context.itemId;\n      console.log(\"using boardID: \", context.boardId)\n      \n      const query = `query {\n        items(ids: ${itemId}) {\n          name\n          column_values {\n            id\n            text\n            value\n          }\n        }\n      }`;\n      monday.api(query).then((res) => {\n          console.log(\"ListInput res: \", res);\n          const columns = res.data.items[0].column_values;\n          console.log(\"Columns: \", columns);\n          const filter = ['text', ]\n          const cols = columns.map(column => {                      \n              return {label: column.id, value: column.text}\n          })\n          console.log(\"Cols: \", cols)\n          const apiParams = obtainInputParams(cols)\n          getJobCost(apiParams)\n          console.log(\"API Params: \", apiParams)\n      }).catch((err) => {\n          console.log(\"Error fetching columns: \", err);\n      }).finally(() => {\n          // setShouldLoad(false)\n      });\n    }\n  }\n\n  const handleVinylSelection = (evt) => {\n    setSelectedVinyl(evt) \n  }\n\n  useEffect(() => {\n    if (context) {\n      const query = `\n        mutation {\n          change_multiple_column_values(item_id: ${context.itemId}, board_id: ${context.boardId}, column_values: \"{\\\\\"numbers34\\\\\": \\\\\"${jobCost.costOfGoodsPerPrintJob}\\\\\", \\\\\"numbers3\\\\\": \\\\\"${jobCost.perPrintTotal}\\\\\", \\\\\"numbers38\\\\\": \\\\\"${jobCost.jobTotal}\\\\\"}\") {\n            id\n            column_values {\n              id\n              value\n            }\n          }\n        }`\n        \n      monday.api(query).then((res) => {\n        console.log(\"Update res: \", res)\n      }).catch((err) => {\n        console.log(\"Error updating columns: \", err);\n      })\n    }\n    console.log(\"Job Cost: \", jobCost)\n  }, [jobCost])\n\n  // Update selectedVinyl in the board storage when it changes\n  useEffect(() => {\n    if (context) {\n      console.log(\"Context: \", context)\n      storageInstance.setItem('selectedVinyl_' + context.itemId, JSON.stringify(selectedVinyl)\n      ).catch(error => { \n        console.log(error)\n      });\n      console.log(\"Vinyl: \", selectedVinyl.value)\n    }\n    \n    \n  }, [selectedVinyl]);\n\n  // useEffect(() => {\n    \n  // }, [context])\n\n  //Some example what you can do with context, read more here: https://developer.monday.com/apps/docs/mondayget#requesting-context-and-settings-data\n  const attentionBoxText = `Hello, your user_id is: ${\n    context ? context.user.id : \"still loading\"\n  }.\n  Let's start building your amazing app, which will change the world!`;\n\n  return (\n    <div className=\"App\">\n      <div className=\"container h-50\">\n        <div className=\"row mx-auto align-items-center\">\n          <div className=\"col-6\">\n            <Dropdown\n              placeholder=\"Select Vinyl\"\n              options={vinyls}\n              onChange={evt => handleVinylSelection(evt)}\n              value={selectedVinyl}\n            >\n            </Dropdown>\n          </div>\n          <div className=\"col-6\">\n            <Button onClick={calculate}>Calculate</Button>\n          </div>\n        </div>\n        <div className=\"row pt-3 mx-auto align-items-center\">\n          <div className=\"col\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <Label text=\"Cost of Goods Sold:\" />\n              </div>\n              <div className=\"col\">\n                <TextField value={jobCost ? jobCost.costOfGoodsPerPrintJob : ''} />\n              </div>\n            </div>\n            <div className=\"row pt-1\">\n              <div className=\"col\">\n                <Label text=\"Per Item Sale:\" />\n              </div>\n              <div className=\"col\">\n                <TextField value={jobCost ? jobCost.perPrintTotal : ''} />\n              </div>\n            </div>\n            <div className=\"row pt-1\">\n              <div className=\"col\">\n                <Label text=\"Total Sale:\" />\n              </div>\n              <div className=\"col\">\n                <TextField value={jobCost ? jobCost.jobTotal : ''} />\n              </div>\n            </div>\n          </div>\n          <div className=\"col\">\n            \n          </div>\n        </div>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default App;\n","/home/nenwam/Documents/rallyessentials/cost_calculator/quickstart-react/src/serviceWorker.js",[],[],{"ruleId":"33","severity":1,"message":"34","line":7,"column":8,"nodeType":"35","messageId":"36","endLine":7,"endColumn":20},{"ruleId":"33","severity":1,"message":"37","line":8,"column":46,"nodeType":"35","messageId":"36","endLine":8,"endColumn":52},{"ruleId":"33","severity":1,"message":"38","line":8,"column":54,"nodeType":"35","messageId":"36","endLine":8,"endColumn":61},{"ruleId":"33","severity":1,"message":"39","line":8,"column":63,"nodeType":"35","messageId":"36","endLine":8,"endColumn":77},{"ruleId":"33","severity":1,"message":"40","line":9,"column":8,"nodeType":"35","messageId":"36","endLine":9,"endColumn":13},{"ruleId":"33","severity":1,"message":"41","line":19,"column":10,"nodeType":"35","messageId":"36","endLine":19,"endColumn":20},{"ruleId":"33","severity":1,"message":"42","line":19,"column":22,"nodeType":"35","messageId":"36","endLine":19,"endColumn":35},{"ruleId":"33","severity":1,"message":"43","line":20,"column":10,"nodeType":"35","messageId":"36","endLine":20,"endColumn":19},{"ruleId":"33","severity":1,"message":"44","line":20,"column":21,"nodeType":"35","messageId":"36","endLine":20,"endColumn":33},{"ruleId":"33","severity":1,"message":"45","line":205,"column":13,"nodeType":"35","messageId":"36","endLine":205,"endColumn":20},{"ruleId":"33","severity":1,"message":"46","line":223,"column":17,"nodeType":"35","messageId":"36","endLine":223,"endColumn":23},{"ruleId":"47","severity":1,"message":"48","line":263,"column":6,"nodeType":"49","endLine":263,"endColumn":15,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"48","line":277,"column":6,"nodeType":"49","endLine":277,"endColumn":21,"suggestions":"51"},{"ruleId":"33","severity":1,"message":"52","line":284,"column":9,"nodeType":"35","messageId":"36","endLine":284,"endColumn":25},"no-unused-vars","'AttentionBox' is defined but never used.","Identifier","unusedVar","'Loader' is defined but never used.","'Divider' is defined but never used.","'ExpandCollapse' is defined but never used.","'axios' is defined but never used.","'colOptions' is assigned a value but never used.","'setColOptions' is assigned a value but never used.","'apiParams' is assigned a value but never used.","'setApiParams' is assigned a value but never used.","'boardId' is assigned a value but never used.","'filter' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'context'. Either include it or remove the dependency array.","ArrayExpression",["53"],["54"],"'attentionBoxText' is assigned a value but never used.",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [context, jobCost]",{"range":"59","text":"60"},"Update the dependencies array to be: [context, selectedVinyl]",{"range":"61","text":"62"},[10549,10558],"[context, jobCost]",[10932,10947],"[context, selectedVinyl]"]